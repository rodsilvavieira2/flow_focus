name: Release Focus Flow

on:
  push:
    branches:
      - release

  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.32.1"
  RUST_VERSION: "1.84.1"

jobs:
  build:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(sed -n 's/^version: \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' pubspec.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build_tar_x86_64:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev libnotify-dev

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: ${{ env.RUST_VERSION }}

      - name: Check rust-toolchain.toml
        run: rustup show

      - name: Dependencies
        run: flutter pub get

      - name: Compile linux
        run: flutter build linux

      - name: Create tar.gz archive
        run: |
          cd build/linux/x64/release/bundle
          tar -czvf ../../../../../result.tar.gz *

      - name: Upload tar.gz archive
        uses: actions/upload-artifact@v4
        with:
          name: tar-gz-x86-64-result
          path: ./*.tar.gz

  build_tar_arm_64:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ARM64 with Docker
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --build-arg FLUTTER_VERSION=${{ env.FLUTTER_VERSION }} \
            --output type=local,dest=./docker-output \
            -f Dockerfile .

      - name: Extract build artifact
        run: |
          cd docker-output
          tar -xzf build.tar.gz
          tar -czvf ../result.tar.gz *

      - name: Upload tar.gz archive
        uses: actions/upload-artifact@v4
        with:
          name: tar-gz-arm-64-result
          path: ./result.tar.gz

  release:
    needs:
      - build
      - build_tar_x86_64
      - build_tar_arm_64
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: Flow Focus v${{ needs.build.outputs.version }}
          body: |
            ## Flow Focus v${{ needs.build.outputs.version }}

            ### Downloads
            - **Linux x86_64**: Download the tar.gz file below
            - **Linux ARM64**: Download the ARM64 tar.gz file below

            ### Installation
            1. Download the appropriate file for your architecture
            2. Extract: `tar -xzf flow-focus-*.tar.gz`
            3. Run the application

            ### Changes
            See the commit history for details on what's new in this release.
          draft: false
          prerelease: false

      # Download and upload x86_64 build
      - name: Download x86_64 tar.gz
        uses: actions/download-artifact@v4
        with:
          name: tar-gz-x86-64-result
          path: x86_64-result

      - name: Upload x86_64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: x86_64-result/result.tar.gz
          asset_name: flow-focus-${{ needs.build.outputs.version }}-linux-x86_64.tar.gz
          asset_content_type: application/gzip

      # Download and upload ARM64 build
      - name: Download ARM64 tar.gz
        uses: actions/download-artifact@v4
        with:
          name: tar-gz-arm-64-result
          path: arm64-result

      - name: Upload ARM64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: arm64-result/result.tar.gz
          asset_name: flow-focus-${{ needs.build.outputs.version }}-linux-arm64.tar.gz
          asset_content_type: application/gzip
