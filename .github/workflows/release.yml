name: Release Linux (Flutter)

on:
  push:
    branches: [release] # altere se usar outro branch-de-release

permissions:
  contents: write # necessário para criar/alterar Releases

env:
  APP_NAME: flow_focus # ⇢ troque pelo nome real do executável

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, aarch64]
    steps:
      # 1. Checkout
      - uses: actions/checkout@v4

      # 2. Dependências de sistema para Flutter desktop + local_notifier
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev \
            libnotify-dev libdbus-1-dev     # requeridos pelo plugin local_notifier

      # 2.1. Install cross-compilation tools for aarch64
      - name: Install aarch64 cross-compilation tools
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      # 3. Instalar/Cache do SDK Flutter
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      # 4. Build do app Linux (modo release)
      - run: flutter config --enable-linux-desktop
      - run: flutter pub get
      
      # 4.1. Build for x64
      - name: Build for x64
        if: matrix.arch == 'x64'
        run: flutter build linux --release
      
      # 4.2. Build for aarch64
      - name: Build for aarch64
        if: matrix.arch == 'aarch64'
        run: flutter build linux --release --target-platform linux-arm64

      # 5. Empacotar executável em .tar.gz
      - name: Package x64 binary
        if: matrix.arch == 'x64'
        run: |
          cd build/linux/x64/release
          tar -czf "$APP_NAME-linux-x64.tar.gz" bundle
          mv "$APP_NAME-linux-x64.tar.gz" "$GITHUB_WORKSPACE/"
      
      - name: Package aarch64 binary
        if: matrix.arch == 'aarch64'
        run: |
          cd build/linux/arm64/release
          tar -czf "$APP_NAME-linux-aarch64.tar.gz" bundle
          mv "$APP_NAME-linux-aarch64.tar.gz" "$GITHUB_WORKSPACE/"

      # 6. Publicar artefato para o job seguinte
      - uses: actions/upload-artifact@v4
        with:
          name: linux-binary-${{ matrix.arch }}
          path: ${{ env.APP_NAME }}-linux-${{ matrix.arch }}.tar.gz
          retention-days: 3

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 1. Baixar artefatos gerados
      - uses: actions/download-artifact@v4
        with:
          name: linux-binary-x64
          path: .
      
      - uses: actions/download-artifact@v4
        with:
          name: linux-binary-aarch64
          path: .

      # 2. Criar ou atualizar a Release e anexar os binários
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2 # Action que une "create + upload"
        with:
          tag_name: linux-${{ github.run_number }}
          name: "Linux build ${{ github.run_number }}"
          generate_release_notes: true
          files: |
            ${{ env.APP_NAME }}-linux-x64.tar.gz
            ${{ env.APP_NAME }}-linux-aarch64.tar.gz
